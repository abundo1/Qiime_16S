1.  FastQC Quality check 

fastqc *.fastq --outdir FastQC  
#run all .fastq files through FastQC Application and save the results in a folder named FastQC. Note the folder must be created in the current directory before running the command
---
NOTE: a lot of Nextera adaptor sequences were discovered
---

[2.] Adapter trimming using BBDuk in the BBTools package

# create "Adapter_Trimmed"
files_1=(*_R1_001.fastq);files_2=(*_R2_001.fastq);sorted_files_1=($(printf "%s\n" "${files_1[@]}" | sort -u));sorted_files_2=($(printf "%s\n" "${files_2[@]}" | sort -u));for ((i=0; i<${#sorted_files_1[@]}; i+=1)); do bbduk.sh -Xmx20g in1=${sorted_files_1[i]} in2=${sorted_files_2[i]} out1=Adapter_Trimmed/A_trimmed_${sorted_files_1[i]%%.*}.fastq out2=Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.fastq ref=$ADAPTSEQ/nextera.fa.gz ktrim=r k=23 mink=11 hdist=1 tpe tbo &>Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.log;done
files_1=(*_R1_001.fastq.gz);files_2=(*_R2_001.fastq.gz);sorted_files_1=($(printf "%s\n" "${files_1[@]}" | sort -u));sorted_files_2=($(printf "%s\n" "${files_2[@]}" | sort -u));for ((i=0; i<${#sorted_files_1[@]}; i+=1)); do bbduk.sh -Xmx20g in1=${sorted_files_1[i]} in2=${sorted_files_2[i]} out1=Adapter_Trimmed/A_trimmed_${sorted_files_1[i]%%.*}.fastq out2=Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.fastq ref=$ADAPTSEQ/nextera.fa.gz ktrim=r k=23 mink=11 hdist=1 tpe tbo &>Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.log;done


# $files_1=(*_R1_001.fastq); pick all R1 files and assign to an array file_1
#$files_2=(*_R2_001.fastq); pick all R2 files and assign to an array file_2
#sorted_files_1=($(printf "%s\n" "${files_1[@]}" | sort -u));sorted_files_2=($(printf "%s\n" "${files_2[@]}" | sort -u));  sort arrays to pair R1 and R2 from the same sample
#for ((i=0; i<${#sorted_files_1[@]}; i+=1)); 
#do bbduk.sh -Xmx20g in1=${sorted_files_1[i]} in2=${sorted_files_2[i]} out1=Adapter_Trimmed/A_trimmed_${sorted_files_1[i]%%.*}.fastq out2=Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.fastq ref=$ADAPTSEQ/nextera.fa.gz ktrim=r k=23 mink=11 hdist=1 tpe tbo;done ->  BDuk parameters
#&>Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.log  -> log file

3. Fast QC Quality check 
fastqc *.fastq --outdir FastQC
# to confirm the adapters have been removed. One can also use the grep ">" or grep -c ">" commands on linux system to check whether a specific string of adaptor sequence is still present

[4.] Merge paired reads with BBMerge
files_1=(*_R1_001.fastq);files_2=(*_R2_001.fastq);sorted_files_1=($(printf "%s\n" "${files_1[@]}" | sort -u));sorted_files_2=($(printf "%s\n" "${files_2[@]}" | sort -u));for ((i=0; i<${#sorted_files_1[@]}; i+=1)); do bbmerge-auto.sh in1=${sorted_files_1[i]} in2=${sorted_files_2[i]} out=Merged2/Merged_${sorted_files_1[i]%%.*}.fastq  outu1=UnMerged2/UnMerged_${sorted_files_1[i]%%.*}.fastq outu2=UnMerged2/UnMerged_${sorted_files_2[i]%%.*}.fastq ihist=Logs_Merged2/A_trimmed_${sorted_files_2[i]%%.*}.hist ecct extend2=20 iterations=5 &>Logs_Merged2/A_trimmed_${sorted_files_2[i]%%.*}.log;done

[5.] Renaming merged Fastq files 
# Remove "TOS" names and name with more informative names like "SW300", "C002", "etc" <= these informative are extracted from the original long illumina names 
for i in *.fastq;do echo ${i//.*} | cut -d"_" -f4 | sed s'/TOS//' | xargs  -I file mv  $i file.fastq;done
# to count the files in the cd
ls -lR | grep ^- | wc -l


[6.]  QIIME: Convert fastq to fasta and join sequences:
multiple_split_libraries_fastq.py -i Merged2 -o Joined_Mergerd_output_folder_3   --sampleid_indicator=.fastq
#this will generate seqs.fna file for downstream application. 

[7:] MOTHUR: Filter reads less than 260 and greater than 320
Load Mothur, i.e., type Mothur and Enter for mothur to load 
copy and paste ==> screen.seqs(fasta=seqs.fna, minlength=260, maxlength=320)
#make sure the seqs.fna file
#a "seqs.good.fna" file is generated for downstream use.  I renamed it to seqs.fna to match most of Qiime scripts

[8.] Confirm sequences in the "seqs.good.fna" have the right length


#Make Length distribution file. Will contain sequence names and lengths
#Must be in the same directory 
pyfasta info -n -1 ./seqs.good.fna > Length_Distro.txt
pyfasta info -n -1 ./seqs.fna > Length_Distribution_Orig_fna.txt

#Extract the sequence length, count and bin the sequence lengths
cat Length_Distro.txt | cut -d" " -f7 | cut -d":" -f2| sort -n| uniq -c 



#make compare histogram with that of the original fna file 

[10]. de vovo OTU picking 
 pick_de_novo_otus.py -i $PWD/seqs.fna -o $PWD/uclust_otus/
 
 [#] if error occurs, you may need to reformat seqs.fna
 reformat.sh in= seqs.good.fna out=reformated_seqs.fna
 
[11]. Filter OTUs that are not bacteria
filter_taxa_from_otu_table.py -i otu_table.biom -o otu_table_taxa_filtered.biom -p k__Bacteria

12. Remove blanks 
filter_samples_from_otu_table.py -i otu_table_taxa_filtered.biom -o otu_table_taxa_filtered_no_blank.biom -m mapping_corrected.txt  -s 'Description:*,!Blank*'

[13.] Filter OTU table to remove OTUs with less than XX count:
filter_otus_from_otu_table.py -i otu_table_taxa_filtered.biom -o otu_table_taxa_filtered_no_less_than_25.biom -n 25
----
NOTE: It is not necessary to generate tissue-specific biom tables and mapping files if analysis are done following the "Bioconductor workflow for microbiome" in R



[14.] 

14a Validate mapping file 
validate_mapping_file.py -m     ck_mapping.txt -o Validated_ck_mapping


summarize_taxa.py -i ck_CE_01W.biom -L 2  -o ./species_tax_rel_ab_01CE

[14.b] #Filter biom table to generate tissue using tissue-specific mapping file

filter_samples_from_otu_table.py -i otu_table.biom -o ck_CE.biom -m ck_mapping_corrected.txt -s 'Tissue:CE'

filter_samples_from_otu_table.py -i otu_table.biom -o ck_IL.biom -m ck_mapping_corrected.txt -s 'Tissue:IL'

filter_samples_from_otu_table.py -i otu_table.biom -o ck_TW.biom -m ck_mapping_corrected.txt -s 'Tissue:TW'

filter_samples_from_otu_table.py -i otu_table.biom -o ck_SW.biom -m ck_mapping_corrected.txt -s 'Tissue:SW'

filter_samples_from_otu_table.py -i otu_table.biom -o ck_TT.biom -m ck_mapping_corrected.txt -s 'Tissue:TT' 

[14.b #Filter biom table to generate flock specific biom tables

filter_samples_from_otu_table.py -i otu_table.biom -o ck_CE.biom -m ck_mapping_corrected.txt -s 'Tissue:CE'

#CE_biom_table_filter with age

filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_01W.biom -m ck_mapping_corrected.txt -s 'Age:01W'

filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_03W.biom -m ck_mapping_corrected.txt -s 'Age:03W'

filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_05W.biom -m ck_mapping_corrected.txt -s 'Age:05W'

filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_08W.biom -m ck_mapping_corrected.txt -s 'Age:08W'

filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_12W.biom -m ck_mapping_corrected.txt -s 'Age:12W'

filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_16W.biom -m ck_mapping_corrected.txt -s 'Age:16W'

filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_25W.biom -m ck_mapping_corrected.txt -s 'Age:25W'

filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_36W.biom -m ck_mapping_corrected.txt -s 'Age:36W'

filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_51W.biom -m ck_mapping_corrected.txt -s 'Age:51W'

#IL_biom_table_filter with age

filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_01W.biom -m ck_mapping_corrected.txt -s 'Age:01W'

filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_03W.biom -m ck_mapping_corrected.txt -s 'Age:03W'

filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_05W.biom -m ck_mapping_corrected.txt -s 'Age:05W'

filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_08W.biom -m ck_mapping_corrected.txt -s 'Age:08W'

filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_12W.biom -m ck_mapping_corrected.txt -s 'Age:12W'

filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_16W.biom -m ck_mapping_corrected.txt -s 'Age:16W'

filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_25W.biom -m ck_mapping_corrected.txt -s 'Age:25W'

filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_36W.biom -m ck_mapping_corrected.txt -s 'Age:36W'

filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_51W.biom -m ck_mapping_corrected.txt -s 'Age:51W'

#SW_biom_table_filter with age

filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_01W.biom -m ck_mapping_corrected.txt -s 'Age:01W'

filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_03W.biom -m ck_mapping_corrected.txt -s 'Age:03W'

filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_05W.biom -m ck_mapping_corrected.txt -s 'Age:05W'

filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_08W.biom -m ck_mapping_corrected.txt -s 'Age:08W'

filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_12W.biom -m ck_mapping_corrected.txt -s 'Age:12W'

filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_16W.biom -m ck_mapping_corrected.txt -s 'Age:16W'

filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_25W.biom -m ck_mapping_corrected.txt -s 'Age:25W'

filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_36W.biom -m ck_mapping_corrected.txt -s 'Age:36W'

filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_51W.biom -m ck_mapping_corrected.txt -s 'Age:51W'

#TW_biom_table_filter with age

filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_01W.biom -m ck_mapping_corrected.txt -s 'Age:01W'

filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_03W.biom -m ck_mapping_corrected.txt -s 'Age:03W'

filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_05W.biom -m ck_mapping_corrected.txt -s 'Age:05W'

filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_08W.biom -m ck_mapping_corrected.txt -s 'Age:08W'

filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_12W.biom -m ck_mapping_corrected.txt -s 'Age:12W'

filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_16W.biom -m ck_mapping_corrected.txt -s 'Age:16W'

filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_25W.biom -m ck_mapping_corrected.txt -s 'Age:25W'

filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_36W.biom -m ck_mapping_corrected.txt -s 'Age:36W'

filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_51W.biom -m ck_mapping_corrected.txt -s 'Age:51W'

#SW_biom_table_filter with sequences

filter_samples_from_otu_table.py -i ck_SW.biom -o filtered_ck_SW_.biom --sample_id_fp ids.txt --negate_sample_id_fp

#CONVERT .biom TO .txt WITH TAXONOMY HEADER
biom convert -i ck_everything.biom  -o ck_everything_biom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i ck_everything.biom  -o ck_everything_biom_withtaxonomy.txt --to-tsv 

#CE
biom convert -i ck_CE_01W.biom  -o ck_CE_01W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_CE_03W.biom  -o ck_CE_03W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_CE_05W.biom  -o ck_CE_05W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_CE_08W.biom  -o ck_CE_08W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_CE_12W.biom  -o ck_CE_12W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_CE_16W.biom  -o ck_CE_16W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_CE_25W.biom  -o ck_CE_25W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_CE_36W.biom  -o ck_CE_36W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_CE_51W.biom  -o ck_CE_51W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

#IL

biom convert -i ck_IL.biom  -o ck_IL_biom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i ck_IL_01W.biom  -o ck_IL_01W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_IL_03W.biom  -o ck_IL_03W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_IL_05W.biom  -o ck_IL_05W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_IL_08W.biom  -o ck_IL_08W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_IL_12W.biom  -o ck_IL_12W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_IL_16W.biom  -o ck_IL_16W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_IL_25W.biom  -o ck_IL_25W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_IL_36W.biom  -o ck_IL_36W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_IL_51W.biom  -o ck_IL_51W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

#SW

biom convert -i ck_SW_01W.biom  -o ck_SW_01W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_SW_03W.biom  -o ck_SW_03W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_SW_05W.biom  -o ck_SW_05W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_SW_08W.biom  -o ck_SW_08W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_SW_12W.biom  -o ck_SW_12W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_SW_16W.biom  -o ck_SW_16W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_SW_25W.biom  -o ck_SW_25W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_SW_36W.biom  -o ck_SW_36W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_SW_51W.biom  -o ck_SW_51W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy


#TW

biom convert -i ck_TW_01W.biom  -o ck_TW_01W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_TW_03W.biom  -o ck_TW_03W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_TW_05W.biom  -o ck_TW_05W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_TW_08W.biom  -o ck_TW_08W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_TW_12W.biom  -o ck_TW_12W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_TW_16W.biom  -o ck_TW_16W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_TW_25W.biom  -o ck_TW_25W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_TW_36W.biom  -o ck_TW_36W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

biom convert -i ck_TW_51W.biom  -o ck_TW_51W_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

#CORE_MICROBIOME

#SINUS WASH 
#3-51WK
filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_03-51WK.biom -m ckSW_core_3-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_SW_03-51WK.biom   -o ck_SW_03-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_SW_03-51WK.biom -o otu_table_core_ck_SW_03-51WK

#5-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_5-51WK.txt -o Validated_ck_mapping_5-51WK
filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_05-51WK.biom -m ckSW_mapping_file_core_5-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_SW_05-51WK.biom   -o ck_SW_03-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_SW_05-51WK.biom -o otu_table_core_ck_SW_05-51WK

#8-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_8-51WK.txt -o Validated_ck_mapping_8-51WK
filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_08-51WK.biom -m ckSW_mapping_file_core_8-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_SW_08-51WK.biom   -o ck_SW_08-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_SW_08-51WK.biom -o otu_table_core_ck_SW_08-51WK

#12-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_12-51WK.txt -o Validated_ck_mapping_12-51WK
filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_12-51WK.biom -m ckSW_mapping_file_core_12-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_SW_12-51WK.biom   -o ck_SW_12-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_SW_12-51WK.biom -o otu_table_core_ck_SW_12-51WK

#16-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_16-51WK.txt -o Validated_ck_mapping_16-51WK
filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_16-51WK.biom -m ckSW_mapping_file_core_16-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_SW_16-51WK.biom   -o ck_SW_16-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_SW_16-51WK.biom -o otu_table_core_ck_SW_16-51WK


#25-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_25-51WK.txt -o Validated_ck_mapping_25-51WK
filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_25-51WK.biom -m ckSW_mapping_file_core_25-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_SW_25-51WK.biom   -o ck_SW_25-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_SW_25-51WK.biom -o otu_table_core_ck_SW_25-51WK


#36-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_36-51WK.txt -o Validated_ck_mapping_36-51WK
filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_36-51WK.biom -m ckSW_mapping_file_core_36-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_SW_36-51WK.biom   -o ck_SW_36-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_SW_36-51WK.biom -o otu_table_core_ck_SW_36-51WK


#51WK
validate_mapping_file.py -m ckSW_mapping_file_core_51WK.txt -o Validated_ck_mapping_51WK
filter_samples_from_otu_table.py -i ck_SW.biom -o ck_SW_51WK.biom -m ckSW_mapping_file_core_51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_SW_51WK.biom   -o ck_SW_51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_SW_51WK.biom -o otu_table_core_ck_SW_51WK

#TRACHEA WASH 
#3-51WK
filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_03-51WK.biom -m ckSW_core_3-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_TW_03-51WK.biom   -o ck_TW_03-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_TW_03-51WK.biom -o otu_table_core_ck_TW_03-51WK

#5-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_5-51WK.txt -o Validated_ck_mapping_5-51WK
filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_05-51WK.biom -m ckSW_mapping_file_core_5-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_TW_05-51WK.biom   -o ck_TW_03-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_TW_05-51WK.biom -o otu_table_core_ck_TW_05-51WK

#8-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_8-51WK.txt -o Validated_ck_mapping_8-51WK
filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_08-51WK.biom -m ckSW_mapping_file_core_8-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_TW_08-51WK.biom   -o ck_TW_08-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_TW_08-51WK.biom -o otu_table_core_ck_TW_08-51WK

#12-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_12-51WK.txt -o Validated_ck_mapping_12-51WK
filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_12-51WK.biom -m ckSW_mapping_file_core_12-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_TW_12-51WK.biom   -o ck_TW_12-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_TW_12-51WK.biom -o otu_table_core_ck_TW_12-51WK

#16-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_16-51WK.txt -o Validated_ck_mapping_16-51WK
filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_16-51WK.biom -m ckSW_mapping_file_core_16-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_TW_16-51WK.biom   -o ck_TW_16-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_TW_16-51WK.biom -o otu_table_core_ck_TW_16-51WK


#25-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_25-51WK.txt -o Validated_ck_mapping_25-51WK
filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_25-51WK.biom -m ckSW_mapping_file_core_25-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_TW_25-51WK.biom   -o ck_TW_25-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_TW_25-51WK.biom -o otu_table_core_ck_TW_25-51WK


#36-51WK
validate_mapping_file.py -m ckSW_mapping_file_core_36-51WK.txt -o Validated_ck_mapping_36-51WK
filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_36-51WK.biom -m ckSW_mapping_file_core_36-51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_TW_36-51WK.biom   -o ck_TW_36-51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_TW_36-51WK.biom -o otu_table_core_ck_TW_36-51WK


#51WK
validate_mapping_file.py -m ckSW_mapping_file_core_51WK.txt -o Validated_ck_mapping_51WK
filter_samples_from_otu_table.py -i ck_TW.biom -o ck_TW_51WK.biom -m ckSW_mapping_file_core_51WK_corrected.txt -s 'Core:Y'
biom convert -i ck_TW_51WK.biom   -o ck_TW_51WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i ck_TW_51WK.biom -o otu_table_core_ck_TW_51WK

# Ileum TISSUE
#3-51WK
filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_03-51WK.biom -m ckSW_core_3-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_IL_03-51WK.biom -o otu_table_core_ck_IL_03-51WK

#5-51WK
filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_05-51WK.biom -m ckSW_mapping_file_core_5-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_IL_05-51WK.biom -o otu_table_core_ck_IL_05-51WK

#8-51WK
filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_08-51WK.biom -m ckSW_mapping_file_core_8-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_IL_08-51WK.biom -o otu_table_core_ck_IL_08-51WK

#12-51WK
filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_12-51WK.biom -m ckSW_mapping_file_core_12-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_IL_12-51WK.biom -o otu_table_core_ck_IL_12-51WK

#16-51WK
filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_16-51WK.biom -m ckSW_mapping_file_core_16-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_IL_16-51WK.biom -o otu_table_core_ck_IL_16-51WK


#25-51WK
filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_25-51WK.biom -m ckSW_mapping_file_core_25-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_IL_25-51WK.biom -o otu_table_core_ck_IL_25-51WK


#36-51WK
filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_36-51WK.biom -m ckSW_mapping_file_core_36-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_IL_36-51WK.biom -o otu_table_core_ck_IL_36-51WK


#51WK
filter_samples_from_otu_table.py -i ck_IL.biom -o ck_IL_51WK.biom -m ckSW_mapping_file_core_51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_IL_51WK.biom -o otu_table_core_ck_IL_51WK

# CECUM TISSUE
#3-51WK
filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_03-51WK.biom -m ckSW_core_3-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_CE_03-51WK.biom -o otu_table_core_ck_CE_03-51WK

#5-51WK
filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_05-51WK.biom -m ckSW_mapping_file_core_5-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_CE_05-51WK.biom -o otu_table_core_ck_CE_05-51WK

#8-51WK
filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_08-51WK.biom -m ckSW_mapping_file_core_8-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_CE_08-51WK.biom -o otu_table_core_ck_CE_08-51WK

#12-51WK
filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_12-51WK.biom -m ckSW_mapping_file_core_12-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_CE_12-51WK.biom -o otu_table_core_ck_CE_12-51WK

#16-51WK
filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_16-51WK.biom -m ckSW_mapping_file_core_16-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_CE_16-51WK.biom -o otu_table_core_ck_CE_16-51WK


#25-51WK
filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_25-51WK.biom -m ckSW_mapping_file_core_25-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_CE_25-51WK.biom -o otu_table_core_ck_CE_25-51WK


#36-51WK
filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_36-51WK.biom -m ckSW_mapping_file_core_36-51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_CE_36-51WK.biom -o otu_table_core_ck_CE_36-51WK


#51WK
filter_samples_from_otu_table.py -i ck_CE.biom -o ck_CE_51WK.biom -m ckSW_mapping_file_core_51WK_corrected.txt -s 'Core:Y'
compute_core_microbiome.py -i ck_CE_51WK.biom -o otu_table_core_ck_CE_51WK



#All
#CE
compute_core_microbiome.py -i ck_CE_01W.biom -o otu_table_core_ck_CE_01W

compute_core_microbiome.py -i ck_CE_03W.biom -o otu_table_core_ck_CE_031W

compute_core_microbiome.py -i ck_CE_05W.biom -o otu_table_core_ck_CE_05W

compute_core_microbiome.py -i ck_CE_08W.biom -o otu_table_core_ck_CE_08W

compute_core_microbiome.py -i ck_CE_12W.biom -o otu_table_core_ck_CE_12W

compute_core_microbiome.py -i ck_CE_16W.biom -o otu_table_core_ck_CE_16W

compute_core_microbiome.py -i ck_CE_25W.biom -o otu_table_core_ck_CE_25W

compute_core_microbiome.py -i ck_CE_36W.biom -o otu_table_core_ck_CE_36W

compute_core_microbiome.py -i ck_CE_51W.biom -o otu_table_core_ck_CE_51W

#IL

compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_ck_IL_all_ages

compute_core_microbiome.py -i ck_IL_01W.biom -o otu_table_core_ck_IL_01W

compute_core_microbiome.py -i ck_IL_03W.biom -o otu_table_core_ck_IL_01W

compute_core_microbiome.py -i ck_IL_05W.biom -o otu_table_core_ck_IL_01W

compute_core_microbiome.py -i ck_IL_08W.biom -o otu_table_core_ck_IL_01W

compute_core_microbiome.py -i ck_IL_12W.biom -o otu_table_core_ck_IL_01W

compute_core_microbiome.py -i ck_IL_16W.biom -o otu_table_core_ck_IL_01W

compute_core_microbiome.py -i ck_IL_25W.biom -o otu_table_core_ck_IL_01W

compute_core_microbiome.py -i ck_IL_36W.biom -o otu_table_core_ck_IL_01W

compute_core_microbiome.py -i ck_IL_51W.biom -o otu_table_core_ck_IL_01W

#SW

compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_ck_SW

compute_core_microbiome.py -i ck_SW_01W.biom -o otu_table_core_ck_SW_01W

compute_core_microbiome.py -i ck_SW_03W.biom -o otu_table_core_ck_SW_03W

compute_core_microbiome.py -i ck_SW_05W.biom -o otu_table_core_ck_SW_05W

compute_core_microbiome.py -i ck_SW_08W.biom -o otu_table_core_ck_SW_08W

compute_core_microbiome.py -i ck_SW_12W.biom -o otu_table_core_ck_SW_12W

compute_core_microbiome.py -i ck_SW_16W.biom -o otu_table_core_ck_SW_16W

compute_core_microbiome.py -i ck_SW_25W.biom -o otu_table_core_ck_SW_25W

compute_core_microbiome.py -i ck_SW_36W.biom -o otu_table_core_ck_SW_36W

compute_core_microbiome.py -i ck_SW_51W.biom -o otu_table_core_ck_SW_51W

#TW
compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_ck_TW
compute_core_microbiome.py -i ck_TW_01W.biom -o otu_table_core_ck_TW_01W

compute_core_microbiome.py -i ck_TW_03W.biom -o otu_table_core_ck_TW_03W

compute_core_microbiome.py -i ck_TW_05W.biom -o otu_table_core_ck_TW_05W

compute_core_microbiome.py -i ck_TW_08W.biom -o otu_table_core_ck_TW_08W

compute_core_microbiome.py -i ck_TW_12W.biom -o otu_table_core_ck_TW_12W

compute_core_microbiome.py -i ck_TW_16W.biom -o otu_table_core_ck_TW_16W

compute_core_microbiome.py -i ck_TW_25W.biom -o otu_table_core_ck_TW_25W

compute_core_microbiome.py -i ck_TW_36W.biom -o otu_table_core_ck_TW_36W

compute_core_microbiome.py -i ck_TW_51W.biom -o otu_table_core_ck_TW_51W



# summarize taxa (species level)

summarize_taxa.py -i ck_TW_25W.biom -L 7  -o ./tax_counts_25TW

summarize_taxa.py -i ck_TW_36W.biom -L 7  -o ./tax_counts_36TW

summarize_taxa.py -i ck_TW_51W.biom -L 7  -o ./tax_counts_51TW





[14.d] #Did the filter work?
biom convert -i ck_CE_L7.biom -o ck_CE_L7from_biom.txt --to-tsv
----

[15.] Summarize taxa through plots:  

summarize_taxa_through_plots.py -i ck_CE.biom -o ck_CE_taxa_summary -m ck_mapping_corrected.txt

summarize_taxa_through_plots.py -i ck_CE.biom -o CE_Group/ -f -s -c Age -m ck_mapping_corrected.txt 
summarize_taxa_through_plots.py -i ck_IL.biom -o IL_Group/ -f -s -c Age -m ck_mapping_corrected.txt 
summarize_taxa_through_plots.py -i ck_TW.biom -o TW_Group/ -f -s -c Age -m ck_mapping_corrected.txt 

summarize_taxa_through_plots.py -i ck_SW.biom -o SW_Group/ -f -s -c Age -m ck_mapping_corrected.txt 

summarize_taxa_through_plots.py -i ck_TT.biom -o TT_Group/ -f -s -c Age -m ck_mapping_corrected.txt 

#flock specific using 'AgeFlockTissue'
summarize_taxa_through_plots.py -i ck_CE.biom -o CE_Group_flock/ -f -s -c AgeFlockTissue -m ck_mapping_corrected.txt 
summarize_taxa_through_plots.py -i ck_IL.biom -o IL_Group_flock/ -f -s -c AgeFlockTissue -m ck_mapping_corrected.txt 
summarize_taxa_through_plots.py -i ck_SW.biom -o SW_Group_flock/ -f -s -c AgeFlockTissue -m ck_mapping_corrected.txt 

summarize_taxa_through_plots.py -i ck_TW.biom -o TW_Group_flock/ -f -s -c AgeFlockTissue -m ck_mapping_corrected.txt 

#summarize_species level

raw counts:
summarize_taxa.py -i ck_CE.biom -L 7 -a -o ./tax2_counts

relative abundance:
summarize_taxa.py -i ck_CE.biom -L 7 -o ./tax2_counts_relative_abundance
summarize_taxa.py -i ck_TW.biom -L 7 -o ./tax2_counts_relative_abundance_TW


[17.] Compute core microbiome

#ck_CE

compute_core_microbiome.py -i ck_CE.biom -o otu_table_core_01CK_CE  --valid_states "AgeTissue:01WCE"
compute_core_microbiome.py -i ck_CE.biom -o otu_table_core_03CK_CE  --valid_states "AgeTissue:03WCE"

compute_core_microbiome.py -i ck_CE.biom -o otu_table_core_05CK_CE  --valid_states "AgeTissue:05WCE"

compute_core_microbiome.py -i ck_CE.biom -o otu_table_core_08CK_CE  --valid_states "AgeTissue:08WCE"

compute_core_microbiome.py -i ck_CE.biom -o otu_table_core_12CK_CE  --valid_states "AgeTissue:12WCE"

compute_core_microbiome.py -i ck_CE.biom -o otu_table_core_16CK_CE  --valid_states "AgeTissue:16WCE"

compute_core_microbiome.py -i ck_CE.biom -o otu_table_core_25CK_CE  --valid_states "AgeTissue:25WCE"

compute_core_microbiome.py -i ck_CE.biom -o otu_table_core_36CK_CE  --valid_states "AgeTissue:36WCE"

compute_core_microbiome.py -i ck_CE.biom -o otu_table_core_51CK_CE  --valid_states "AgeTissue:51WCE"

compute_core_microbiome.py -i ck_CE_L7.biom -o otu_table_core_51CK_CE  --valid_states "AgeTissue:01WCE"



#ck_IL
compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_01CK_IL  --valid_states "AgeTissue:01WIL"

compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_03CK_IL  --valid_states "AgeTissue:03WIL"

compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_05CK_IL  --valid_states "AgeTissue:05WIL"

compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_08CK_IL  --valid_states "AgeTissue:08WIL"

compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_12CK_IL  --valid_states "AgeTissue:12WIL"

compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_16CK_IL  --valid_states "AgeTissue:16WIL"

compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_25CK_IL  --valid_states "AgeTissue:25WIL"

compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_36CK_IL  --valid_states "AgeTissue:36WIL"

compute_core_microbiome.py -i ck_IL.biom -o otu_table_core_51CK_IL  --valid_states "AgeTissue:51WIL"

#ck_SW
compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_01CK_IL  --valid_states "AgeTissue:01WSW"
biom convert -i core_table_100.biom  -o core_table_100_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_03CK_IL  --valid_states "AgeTissue:03WSW"

compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_05CK_IL  --valid_states "AgeTissue:05WSW"

compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_08CK_IL  --valid_states "AgeTissue:08WSW"

compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_12CK_IL  --valid_states "AgeTissue:12WSW"

compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_16CK_IL  --valid_states "AgeTissue:16WSW"

compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_25CK_IL  --valid_states "AgeTissue:25WSW"

compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_36CK_IL  --valid_states "AgeTissue:36WSW"

compute_core_microbiome.py -i ck_SW.biom -o otu_table_core_51CK_IL  --valid_states "AgeTissue:51WSW"


#ck_TW
compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_01CK_IL  --valid_states "AgeTissue:01WTW"

compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_03CK_IL  --valid_states "AgeTissue:03WTW"

compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_05CK_IL  --valid_states "AgeTissue:05WTW"

compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_08CK_IL  --valid_states "AgeTissue:08WTW"

compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_12CK_IL  --valid_states "AgeTissue:12WTW"

compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_16CK_IL  --valid_states "AgeTissue:16WTW"

compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_25CK_IL  --valid_states "AgeTissue:25WTW"

compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_36CK_IL  --valid_states "AgeTissue:36WTW"

compute_core_microbiome.py -i ck_TW.biom -o otu_table_core_51CK_IL  --valid_states "AgeTissue:51WTW"





# CORE DIVERSITY
--CORE DIVERSITY (EXAMPLE)-------------------
core_diversity_analyses.py -i $PWD/otu_table_taxa_filtered_no_less_than_25.biom -o $PWD/core_output_ck_tk -m $PWD/ck_tk_mapping_updated_082017_corrected.txt -c Bird_Type -t $PWD/rep_set.tre -e 1500
core_diversity_analyses.py -i $PWD/tk_ck_SW.biom -o $PWD/core_output_ck_tk_sw -m $PWD/ck_tk_mapping_updated_082017_corrected.txt -c Bird_Type -t $PWD/rep_set.tre -e 10000
core_diversity_analyses.py -i $PWD/tk_ck_TW.biom -o $PWD/core_output_ck_tk_TW -m $PWD/ck_tk_mapping_updated_082017_corrected.txt -c Bird_Type -t $PWD/rep_set.tre -e 1000
core_diversity_analyses.py -i $PWD/tk_ck_IL.biom -o $PWD/core_output_ck_tk_IL -m $PWD/ck_tk_mapping_updated_082017_corrected.txt -c Bird_Type -t $PWD/rep_set.tre -e 1000
core_diversity_analyses.py -i $PWD/tk_ck_CE.biom -o $PWD/core_output_ck_tk_CE -m $PWD/ck_tk_mapping_updated_082017_corrected.txt -c Bird_Type -t $PWD/rep_set.tre -e 10000

--CORE DIVERSITY-------------------
core_diversity_analyses.py -i $PWD/otu_table_taxa_filtered_no_less_than_25.biom -o $PWD/core_output_ck_tk -m $PWD/ck_tk_mapping_updated_082017_corrected.txt -c Bird_Type -t $PWD/rep_set.tre -e 1500
core_diversity_analyses.py -i $PWD/tk_ck_SW.biom -o $PWD/core_output_ck_tk_sw -m $PWD/ck_tk_mapping_updated_082017_corrected.txt -c Bird_Type -t $PWD/rep_set.tre -e 10000
core_diversity_analyses.py -i $PWD/tk_ck_TW.biom -o $PWD/core_output_ck_tk_TW -m $PWD/ck_tk_mapping_updated_082017_corrected.txt -c Bird_Type -t $PWD/rep_set.tre -e 1000
core_diversity_analyses.py -i $PWD/tk_ck_IL.biom -o $PWD/core_output_ck_tk_IL -m $PWD/ck_tk_mapping_updated_082017_corrected.txt -c Bird_Type -t $PWD/rep_set.tre -e 1000

core_diversity_analyses.py -i ck_CE.biom -o core_output_ck_CE -m ck_mapping_corrected.txt -c Age -t rep_set.tre -e 9420
core_diversity_analyses.py -i ck_IL.biom -o core_output_ck_IL -m ck_mapping_corrected.txt -c Age -t rep_set.tre -e 1043

core_diversity_analyses.py -i ck_SW.biom -o core_output_ck_SW -m ck_mapping_corrected.txt -c Age -t rep_set.tre -e 9420

core_diversity_analyses.py -i ck_TW.biom -o core_output_ck_TW -m ck_mapping_corrected.txt -c Age -t rep_set.tre -e 6257



[18] # Estimates the observation (e.g., OTU) richness of samples in a BIOM table

estimate_observation_richness.py -i ck_CE.biom -o estimates_out_ckCE







[16.] Determine number of reads per sample for rarefaction:
biom summarize-table -i ck_CE.biom -o biom_summary_ck_CE.txt

biom summarize-table -i ck_IL.biom -o biom_summary_ck_IL.txt

biom summarize-table -i ck_TW.biom -o biom_summary_ck_TW.txt

biom summarize-table -i ck_SW.biom -o biom_summary_ck_SW.txt

biom summarize-table -i ck_TT.biom -o biom_summary_ck_TT.txt

biom summarize-table -i otu_table_taxa_filtered_no_less_than_25.biom -o biom_summary_orig.txt


[17.] Rareify to appropriate number:
#Example -> single_rarefaction.py -i reo.biom -o reo_rare5000.biom -d 5000

single_rarefaction.py -i ck_CE.biom -o ck_CE_rare9420.biom -d 9420

single_rarefaction.py -i ck_IL.biom -o ck_IL_rare1043.biom -d 1043

single_rarefaction.py -i ck_TW.biom -o ck_TW_rare6257.biom -d 6257

single_rarefaction.py -i ck_SW.biom -o ck_SW_rare9420.biom -d 9420

single_rarefaction.py -i ck_TT.biom -o ck_TT_rare1121.biom -d 1121

single_rarefaction.py -i otu_table_taxa_filtered_no_less_than_25.biom -o ck_all_rare1043.biom -d 1043




18. Compute core microbiome

compute_core_microbiome.py -i otu_table.biom -o otu_table_core
compute_core_microbiome.py -i tk_ck_CE.biom -o otu_table_core_01CK_CE --min_fraction_for_core 0. --valid_states "AgeSpecies:01W_CK"
compute_core_microbiome.py -i tk_ck_CE.biom -o otu_table_core_01WTK_CE --valid_states "AgeSpecies:01W_TK"
compute_core_microbiome.py -i tk_ck_IL.biom -o otu_table_core_01WTK_IL --valid_states "AgeSpecies:01W_TK"
compute_core_microbiome.py -i tk_ck_IL.biom -o otu_table_core_03WTK_IL --valid_states "AgeSpecies:03W_TK"
compute_core_microbiome.py -i tk_ck_TW.biom -o otu_table_core_01WTK_IL --valid_states "AgeSpecies:01W_TK"





18. Beta diversity:
#generate UniFrac for R
beta_diversity.py -i ck_all_rare1043.biom -o bdv_ck_all_rare1043/ -t rep_set.tre

beta_diversity.py -i ck_CE_rare9420.biom -o bdv_ck_CE_rare9420/ -t rep_set.tre

beta_diversity.py -i ck_IL_rare1043.biom -o bdv_ck_IL_rare1043/ -t rep_set.tre

beta_diversity.py -i ck_TW_rare6257.biom -o bdv_ck_TW_rare6257/ -t rep_set.tre

beta_diversity.py -i ck_SW_rare9420.biom -o bdv_ck_SW_rare9420/ -t rep_set.tre

beta_diversity.py -i ck_TT_rare1121.biom -o bdv_ck_TT_rare1121/ -t rep_set.tre

_____________________________________________________________________

#Commercial vs SPF
beta_diversity.py -i CE_rare15319.biom -o bdv_CE_rare15319/ -t rep_set_CE.tre
beta_diversity.py -i IL_rare1539.biom -o bdv_IL_rare1539/ -t rep_set_IL.tre

#generate bdv plots with QIIME
beta_diversity_through_plots.py -i reo_all_rare10000 -o bdiv_reo_all10000/ -t rep_set.tre -m mapping.txt -e 5000



19. Alpha diversity
------
A. Alpha rarefaction
alpha_rarefaction.py -i reo.biom -o reo_arare_max5000/ -t rep_set.tre -m mapping_REO2_corrected.txt -e 5000 --parameter_fp alpha_parameters.txt
alpha_rarefaction.py -i reo.biom -o reo_arare_shan_5000/ -t rep_set.tre -m mapping_REO2_corrected.txt -e 5000 -p alpha_params.txt

B. Statistics
compare_alpha_diversity.py -i ./reo_arare_max5000/alpha_div_collated/PD_whole_tree.txt -m mapping_REO2_corrected.txt -c Group -d 5000 -o adiv_test_otus_all_Group
compare_alpha_diversity.py -i ./reo_arare_max5000/alpha_div_collated/PD_whole_tree.txt -m mapping_REO2_corrected.txt -c Group -d 5000 -o adiv_test_tree_all_Group

------
alpha_rarefaction.py -i CE.biom -o arare_CE_14000/ -t rep_set.tre -m mapping5_corrected.txt -e 14000


Compare alpha diversity:
compare_alpha_diversity.py -i ./arare_1000/alpha_div_collated/PD_whole_tree.txt -m mapping2.txt -c Treatment -d 1000 -o adiv_test_Treatment

-----------

15. 2D PCA plots:
make_2d_plots.py -i bdiv_even5000/unweighted_unifrac_pc.txt -m mapping.txt -o 2d_plots/

16. OTUs in tabular format:
biom convert -i otu_table_rare5000.biom -o table.from_biom.txt --to-tsv 

17. Compare categories:
compare_categories.py --method anosim -i bdiv_even1000_cecum/unweighted_unifrac_dm.txt -m mapping2.txt -c Treatment -o anosim_out_cecum_treatment -n 999





16. TO BE CONTINUEDpyfasta info -n -1 ./seqs.good.fna > Length_Distro.txt




