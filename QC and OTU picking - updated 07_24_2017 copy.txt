1.  FastQC Quality check 

fastqc *.fastq --outdir FastQC  
#run all .fastq files through FastQC Application and save the results in a folder named FastQC. Note the folder must be created in the current directory before running the command
---
NOTE: a lot of Nextera adaptor sequences were discovered
---

[2.] Adapter trimming using BBDuk in the BBTools package

# create "Adapter_Trimmed"
files_1=(*_R1_001.fastq);files_2=(*_R2_001.fastq);sorted_files_1=($(printf "%s\n" "${files_1[@]}" | sort -u));sorted_files_2=($(printf "%s\n" "${files_2[@]}" | sort -u));for ((i=0; i<${#sorted_files_1[@]}; i+=1)); do bbduk.sh -Xmx20g in1=${sorted_files_1[i]} in2=${sorted_files_2[i]} out1=Adapter_Trimmed/A_trimmed_${sorted_files_1[i]%%.*}.fastq out2=Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.fastq ref=$ADAPTSEQ/nextera.fa.gz ktrim=r k=23 mink=11 hdist=1 tpe tbo &>Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.log;done
files_1=(*_R1_001.fastq.gz);files_2=(*_R2_001.fastq.gz);sorted_files_1=($(printf "%s\n" "${files_1[@]}" | sort -u));sorted_files_2=($(printf "%s\n" "${files_2[@]}" | sort -u));for ((i=0; i<${#sorted_files_1[@]}; i+=1)); do bbduk.sh -Xmx20g in1=${sorted_files_1[i]} in2=${sorted_files_2[i]} out1=Adapter_Trimmed/A_trimmed_${sorted_files_1[i]%%.*}.fastq out2=Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.fastq ref=$ADAPTSEQ/nextera.fa.gz ktrim=r k=23 mink=11 hdist=1 tpe tbo &>Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.log;done


# $files_1=(*_R1_001.fastq); pick all R1 files and assign to an array file_1
#$files_2=(*_R2_001.fastq); pick all R2 files and assign to an array file_2
#sorted_files_1=($(printf "%s\n" "${files_1[@]}" | sort -u));sorted_files_2=($(printf "%s\n" "${files_2[@]}" | sort -u));  sort arrays to pair R1 and R2 from the same sample
#for ((i=0; i<${#sorted_files_1[@]}; i+=1)); 
#do bbduk.sh -Xmx20g in1=${sorted_files_1[i]} in2=${sorted_files_2[i]} out1=Adapter_Trimmed/A_trimmed_${sorted_files_1[i]%%.*}.fastq out2=Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.fastq ref=$ADAPTSEQ/nextera.fa.gz ktrim=r k=23 mink=11 hdist=1 tpe tbo;done ->  BDuk parameters
#&>Adapter_Trimmed/A_trimmed_${sorted_files_2[i]%%.*}.log  -> log file

3. Fast QC Quality check 
fastqc *.fastq --outdir FastQC
# to confirm the adapters have been removed. One can also use the grep ">" or grep -c ">" commands on linux system to check whether a specific string of adaptor sequence is still present

[4.] Merge paired reads with BBMerge
files_1=(*_R1_001.fastq);files_2=(*_R2_001.fastq);sorted_files_1=($(printf "%s\n" "${files_1[@]}" | sort -u));sorted_files_2=($(printf "%s\n" "${files_2[@]}" | sort -u));for ((i=0; i<${#sorted_files_1[@]}; i+=1)); do bbmerge-auto.sh in1=${sorted_files_1[i]} in2=${sorted_files_2[i]} out=Merged2/Merged_${sorted_files_1[i]%%.*}.fastq  outu1=UnMerged2/UnMerged_${sorted_files_1[i]%%.*}.fastq outu2=UnMerged2/UnMerged_${sorted_files_2[i]%%.*}.fastq ihist=Logs_Merged2/A_trimmed_${sorted_files_2[i]%%.*}.hist ecct extend2=20 iterations=5 &>Logs_Merged2/A_trimmed_${sorted_files_2[i]%%.*}.log;done

[5.] Renaming merged Fastq files 
# Remove "TOS" names and name with more informative names like "SW300", "C002", "etc" <= these informative are extracted from the original long illumina names 
for i in *.fastq;do echo ${i//.*} | cut -d"_" -f4 | sed s'/TOS//' | xargs  -I file mv  $i file.fastq;done
# to count the files in the cd
ls -lR | grep ^- | wc -l


[6.]  QIIME: Convert fastq to fasta and join sequences:
multiple_split_libraries_fastq.py -i Merged2 -o Joined_Mergerd_output_folder_3   --sampleid_indicator=.fastq
#this will generate seqs.fna file for downstream application. 


[6.a] Counting # of samples in the seqs.fna file (sample_count)

# Extract the sequence headers per sample from a .fna file

#in seqs.fna

grep ">" seqs.fna | grep C | cut -c-5| sort > tk_CE_sample_no.txt 
uniq -c tk_CE_sample_no.txt > CE_uniq.txt # this command will give you the number of sequences per sample
grep -c '>' CE_uniq.txt # this will count the # of retained

grep ">" seqs.fna | grep I | cut -c-5| sort > tk_I_sample_no.txt 
uniq -c tk_I_sample_no.txt > I_uniq.txt
grep -c '>' I_uniq.txt 

grep ">" seqs.fna | grep T | cut -c-5| sort > tk_TW_sample_no.txt 
uniq -c tk_TW_sample_no.txt > TW_uniq.txt
grep -c '>' TW_uniq.txt 

grep ">" seqs.fna | grep SW | cut -c-6| sort > tk_SW_sample_no.txt 
uniq -c tk_SW_sample_no.txt > SW_uniq.txt
grep -c '>' SW_uniq.txt

#in seqs.good.fna

grep ">" seqs.good.fna | grep C | cut -c-5| sort > tk_CE_sample_no.txt 

uniq -c tk_CE_sample_no.txt > CE_uniq.txt 

grep -c '>' CE_uniq.txt 

grep ">" seqs.good.fna | grep I | cut -c-5| sort > tk_I_sample_no.txt 

uniq -c tk_I_sample_no.txt > I_uniq.txt

grep ">" seqs.good.fna | grep T | cut -c-5| sort > tk_TW_sample_no.txt 

uniq -c tk_TW_sample_no.txt > TW_uniq.txt

grep ">" seqs.good.fna | grep SW | cut -c-6| sort > tk_SW_sample_no.txt 

uniq -c tk_SW_sample_no.txt > SW_uniq.txt


grep -c '>' I_uniq.txt 


grep -c '>' TW_uniq.txt 


grep -c '>' SW_uniq.txt





[7:] MOTHUR: Filter reads less than 260 and greater than 320
Load Mothur, i.e., type Mothur and Enter for mothur to load 
copy and paste ==> screen.seqs(fasta=seqs.fna, minlength=260, maxlength=320)
#make sure the seqs.fna file
#a "seqs.good.fna" file is generated for downstream use.  I renamed it to seqs.fna to match most of Qiime scripts

[8.] Confirm sequences in the "seqs.good.fna" have the right length


#Make Length distribution file. Will contain sequence names and lengths
#Must be in the same directory 
pyfasta info -n -1 ./seqs.good.fna > Length_Distro.txt
pyfasta info -n -1 ./seqs.fna > Length_Distribution_Orig_fna.txt

#Extract the sequence length, count and bin the sequence lengths
cat Length_Distro.txt | cut -d" " -f7 | cut -d":" -f2| sort -n| uniq -c 



#make compare histogram with that of the original fna file 

[10]. de vovo OTU picking 
 pick_de_novo_otus.py -i $PWD/seqs.fna -o $PWD/uclust_otus/
 
# if error occurs, you may need to reformat seqs.fna
 reformat.sh in= seqs.good.fna out=reformated_seqs.fna
 
[11]. Filter OTUs that are not bacteria
filter_taxa_from_otu_table.py -i otu_table.biom -o otu_table_taxa_filtered.biom -p k__Bacteria

12. Remove blanks 
filter_samples_from_otu_table.py -i otu_table_taxa_filtered.biom -o otu_table_taxa_filtered_no_blank.biom -m mapping_corrected.txt  -s 'Description:*,!Blank*'

[13.] Filter OTU table to remove OTUs with less than XX count:
filter_otus_from_otu_table.py -i otu_table_taxa_filtered_no_blank.biom -o otu_table_taxa_filtered_no_blank_nless25.biom -n 25

filter_otus_from_otu_table.py -i otu_table_taxa_filtered_no_blank_nless25.biom -o otu_table_taxa_filtered_no_blank_nless25_2.biom -n 25

[13.a] Did the biom table work?
biom summarize-table -i otu_table_taxa_filtered_no_blank.biom -o biom_summary_tk_all_nless_25.txt

biom convert -i otu_table_taxa_filtered_no_blank_nless25.biom -o otu_table_taxa_filtered_no_blank_nless25_biom.txt --to-tsv

biom convert -i otu_table_taxa_filtered_no_blank_nless25.biom -o otu_table_taxa_filtered_no_blank_nless25_biom_withtaxonomy.txt --to-tsv --header-key taxonomy


----
NOTE: It is not necessary to generate tissue-specific biom tables and mapping files if analysis are done following the "Bioconductor workflow for microbiome" in R



[14.] 

14a Validate mapping file 
validate_mapping_file.py -m mapping6.txt -o Validated_tk_mapping6


[14.b] #Filter biom table using the corrected mapping file to generate tissue and age specific biom tables 

#by tissue

filter_samples_from_otu_table.py -i otu_table_taxa_filtered_no_blank_nless25.biom -o tk_CE.biom -m mapping6_corrected.txt -s 'Tissue:CE'

filter_samples_from_otu_table.py -i otu_table_taxa_filtered_no_blank_nless25.biom -o tk_IL.biom -m mapping6_corrected.txt -s 'Tissue:IL'

filter_samples_from_otu_table.py -i otu_table_taxa_filtered_no_blank_nless25.biom -o tk_TW.biom -m mapping6_corrected.txt -s 'Tissue:TW'

filter_samples_from_otu_table.py -i otu_table_taxa_filtered_no_blank_nless25.biom -o tk_SW.biom -m mapping6_corrected.txt -s 'Tissue:SW'

#by age 
#CE
filter_samples_from_otu_table.py -i tk_CE.biom -o tk_01WCE.biom -m mapping6_corrected.txt -s 'Age:01W'

filter_samples_from_otu_table.py -i tk_CE.biom -o tk_03WCE.biom -m mapping6_corrected.txt -s 'Age:03W'

filter_samples_from_otu_table.py -i tk_CE.biom -o tk_05WCE.biom -m mapping6_corrected.txt -s 'Age:05W'

filter_samples_from_otu_table.py -i tk_CE.biom -o tk_08WCE.biom -m mapping6_corrected.txt -s 'Age:08W'

filter_samples_from_otu_table.py -i tk_CE.biom -o tk_12WCE.biom -m mapping6_corrected.txt -s 'Age:12W'

filter_samples_from_otu_table.py -i tk_CE.biom -o tk_16WCE.biom -m mapping6_corrected.txt -s 'Age:16W'

#IL
filter_samples_from_otu_table.py -i tk_IL.biom -o tk_01WIL.biom -m mapping6_corrected.txt -s 'Age:01W'

filter_samples_from_otu_table.py -i tk_IL.biom -o tk_03WIL.biom -m mapping6_corrected.txt -s 'Age:03W'

filter_samples_from_otu_table.py -i tk_IL.biom -o tk_05WIL.biom -m mapping6_corrected.txt -s 'Age:05W'

filter_samples_from_otu_table.py -i tk_IL.biom -o tk_08WIL.biom -m mapping6_corrected.txt -s 'Age:08W'

filter_samples_from_otu_table.py -i tk_IL.biom -o tk_12WIL.biom -m mapping6_corrected.txt -s 'Age:12W'

filter_samples_from_otu_table.py -i tk_IL.biom -o tk_16WIL.biom -m mapping6_corrected.txt -s 'Age:16W'

#SW
filter_samples_from_otu_table.py -i tk_SW.biom -o tk_01WSW.biom -m mapping6_corrected.txt -s 'Age:01W'
biom convert -i tk_01WSW.biom -o tk_01WSW_biom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i tk_01WSW.biom -o tk_01WSW_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

filter_samples_from_otu_table.py -i tk_SW.biom -o tk_03WSW.biom -m mapping6_corrected.txt -s 'Age:03W'

filter_samples_from_otu_table.py -i tk_SW.biom -o tk_05WSW.biom -m mapping6_corrected.txt -s 'Age:05W'

filter_samples_from_otu_table.py -i tk_SW.biom -o tk_08WSW.biom -m mapping6_corrected.txt -s 'Age:08W'

filter_samples_from_otu_table.py -i tk_SW.biom -o tk_12WSW.biom -m mapping6_corrected.txt -s 'Age:12W'

filter_samples_from_otu_table.py -i tk_SW.biom -o tk_16WSW.biom -m mapping6_corrected.txt -s 'Age:16W'

#TW
filter_samples_from_otu_table.py -i tk_TW.biom -o tk_01WTW.biom -m mapping6_corrected.txt -s 'Age:01W'

filter_samples_from_otu_table.py -i tk_TW.biom -o tk_03WTW.biom -m mapping6_corrected.txt -s 'Age:03W'

filter_samples_from_otu_table.py -i tk_TW.biom -o tk_05WTW.biom -m mapping6_corrected.txt -s 'Age:05W'

filter_samples_from_otu_table.py -i tk_TW.biom -o tk_08WTW.biom -m mapping6_corrected.txt -s 'Age:08W'

filter_samples_from_otu_table.py -i tk_TW.biom -o tk_12WTW.biom -m mapping6_corrected.txt -s 'Age:12W'

filter_samples_from_otu_table.py -i tk_TW.biom -o tk_16WTW.biom -m mapping6_corrected.txt -s 'Age:16W'



14.c #Did the filter work?
biom convert -i tk_CE.biom -o tk_CE_from_biom.txt --to-tsv
----

[15.] Summarize taxa 

# summarize taxa (species level)

#CE_summarize taxa (species level)
summarize_taxa.py -i tk_01WCE.biom -L 7  -o ./species_tax_rel_ab_01CE
summarize_taxa.py -i tk_01WCE.biom -L 7 -a -o ./species_tax_counts_01CE #quality_check
biom convert -i tk_01WCE_L7.biom -o tk_01WCE_L7_from_biom.txt --to-tsv #quality checkc

summarize_taxa.py -i tk_03WCE.biom -L 7  -o ./species_tax_rel_ab_03CE

summarize_taxa.py -i tk_05WCE.biom -L 7  -o ./species_tax_rel_ab_05CE

summarize_taxa.py -i tk_08WCE.biom -L 7  -o ./species_tax_rel_ab_08CE

summarize_taxa.py -i tk_12WCE.biom -L 7  -o ./species_tax_rel_ab_12CE

summarize_taxa.py -i tk_16WCE.biom -L 7  -o ./species_tax_rel_ab_16CE

#IL_summarize taxa (species level)
summarize_taxa.py -i tk_01WIL.biom -L 7  -o ./species_tax_rel_ab_01IL

summarize_taxa.py -i tk_03WIL.biom -L 7  -o ./species_tax_rel_ab_03IL

summarize_taxa.py -i tk_05WIL.biom -L 7  -o ./species_tax_rel_ab_05IL

summarize_taxa.py -i tk_08WIL.biom -L 7  -o ./species_tax_rel_ab_08IL

summarize_taxa.py -i tk_12WIL.biom -L 7  -o ./species_tax_rel_ab_12IL

summarize_taxa.py -i tk_16WIL.biom -L 7  -o ./species_tax_rel_ab_16IL

#SW_summarize taxa (species level)
summarize_taxa.py -i tk_01WSW.biom -L 7  -o ./species_tax_rel_ab_01SW
biom convert -i tk_01WSW_L7.biom -o tk_01WSW_L7_biom_withtaxonomy.txt --to-tsv --header-key taxonomy

summarize_taxa.py -i tk_03WSW.biom -L 7  -o ./species_tax_rel_ab_03SW

summarize_taxa.py -i tk_05WSW.biom -L 7  -o ./species_tax_rel_ab_05SW

summarize_taxa.py -i tk_08WSW.biom -L 7  -o ./species_tax_rel_ab_08SW

summarize_taxa.py -i tk_12WSW.biom -L 7  -o ./species_tax_rel_ab_12SW

summarize_taxa.py -i tk_16WSW.biom -L 7  -o ./species_tax_rel_ab_16SW

#TW_summarize taxa (species level)
summarize_taxa.py -i tk_01WTW.biom -L 7  -o ./species_tax_rel_ab_01TW

summarize_taxa.py -i tk_03WTW.biom -L 7  -o ./species_tax_rel_ab_03TW

summarize_taxa.py -i tk_05WTW.biom -L 7  -o ./species_tax_rel_ab_05TW

summarize_taxa.py -i tk_08WTW.biom -L 7  -o ./species_tax_rel_ab_08TW

summarize_taxa.py -i tk_12WTW.biom -L 7  -o ./species_tax_rel_ab_12TW

summarize_taxa.py -i tk_16WTW.biom -L 7  -o ./species_tax_rel_ab_16TW

[16. Compute core microbiome

#CE_core
compute_core_microbiome.py -i tk_01WCE.biom -o otu_table_core_01WTK_CE 
biom convert -i core_table_100.biom -o core_table_100.txt --to-tsv #quality check

compute_core_microbiome.py -i tk_03WCE.biom -o otu_table_core_03WTK_CE 

compute_core_microbiome.py -i tk_05WCE.biom -o otu_table_core_05WTK_CE 

compute_core_microbiome.py -i tk_08WCE.biom -o otu_table_core_08WTK_CE 

compute_core_microbiome.py -i tk_12WCE.biom -o otu_table_core_12WTK_CE 

compute_core_microbiome.py -i tk_16WCE.biom -o otu_table_core_16WTK_CE 


#IL_core
compute_core_microbiome.py -i tk_01WIL.biom -o otu_table_core_01WTK_IL

compute_core_microbiome.py -i tk_03WIL.biom -o otu_table_core_03WTK_IL

compute_core_microbiome.py -i tk_05WIL.biom -o otu_table_core_05WTK_IL

compute_core_microbiome.py -i tk_08WIL.biom -o otu_table_core_08WTK_IL

compute_core_microbiome.py -i tk_12WIL.biom -o otu_table_core_12WTK_IL 

compute_core_microbiome.py -i tk_16WIL.biom -o otu_table_core_16WTK_IL 

#SW_core
compute_core_microbiome.py -i tk_SW.biom -o otu_table_core_TK_SW
compute_core_microbiome.py -i tk_01WSW.biom -o otu_table_core_01WTK_SW
compute_core_microbiome.py -i tk_01WSW.biom -o otu_table_core_01WTK_SW

compute_core_microbiome.py -i tk_03WSW.biom -o otu_table_core_03WTK_SW

compute_core_microbiome.py -i tk_05WSW.biom -o otu_table_core_05WTK_SW

compute_core_microbiome.py -i tk_08WSW.biom -o otu_table_core_08WTK_SW

compute_core_microbiome.py -i tk_12WSW.biom -o otu_table_core_12WTK_SW 

compute_core_microbiome.py -i tk_16WSW.biom -o otu_table_core_16WTK_SW 

#TW_core

compute_core_microbiome.py -i tk_TW.biom -o otu_table_core_TK_TW_all

compute_core_microbiome.py -i tk_01WTW.biom -o otu_table_core_01WTK_TW

compute_core_microbiome.py -i tk_03WTW.biom -o otu_table_core_03WTK_TW

compute_core_microbiome.py -i tk_05WTW.biom -o otu_table_core_05WTK_TW

compute_core_microbiome.py -i tk_08WTW.biom -o otu_table_core_08WTK_TW

compute_core_microbiome.py -i tk_12WTW.biom -o otu_table_core_12WTK_TW 

compute_core_microbiome.py -i tk_16WTW.biom -o otu_table_core_16WTK_TW 

#SINUS WASH_Dominant_Core
#3-16WK
validate_mapping_file.py -m tk_mapping_5-16WK.txt -o Validated_Tk_mapping_5-16WK
validate_mapping_file.py -m tk_mapping_8-16WK.txt -o Validated_Tk_mapping_8-16WK
validate_mapping_file.py -m tk_mapping_12-16WK.txt -o Validated_Tk_mapping_12-16WK
validate_mapping_file.py -m tk_mapping_16WK.txt -o Validated_Tk_mapping_16WK




filter_samples_from_otu_table.py -i tk_SW.biom -o tk_SW_03-16WK.biom -m tk_mapping_3-16WK_corrected.txt -s 'Core:Y'
filter_samples_from_otu_table.py -i tk_SW.biom -o tk_SW_05-16WK.biom -m tk_mapping_5-16WK_corrected.txt -s 'Core:Y'
filter_samples_from_otu_table.py -i tk_SW.biom -o tk_SW_08-16WK.biom -m tk_mapping_8-16WK_corrected.txt -s 'Core:Y'
filter_samples_from_otu_table.py -i tk_SW.biom -o tk_SW_12-16WK.biom -m tk_mapping_12-16WK_corrected.txt -s 'Core:Y'
filter_samples_from_otu_table.py -i tk_SW.biom -o tk_SW_16WK.biom -m tk_mapping_16WK_corrected.txt -s 'Core:Y'


biom convert -i tk_SW_03-16WK.biom   -o tk_SW_03-16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i tk_SW_05-16WK.biom   -o tk_SW_05-16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i tk_SW_08-16WK.biom   -o tk_SW_08-16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i tk_SW_12-16WK.biom   -o tk_SW_12-16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i tk_SW_16WK.biom   -o tk_SW_16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy

compute_core_microbiome.py -i tk_SW_03-16WK.biom -o otu_table_core_tk_SW_03-16WK
compute_core_microbiome.py -i tk_SW_05-16WK.biom -o otu_table_core_tk_SW_05-16WK
compute_core_microbiome.py -i tk_SW_08-16WK.biom -o otu_table_core_tk_SW_08-16WK
compute_core_microbiome.py -i tk_SW_12-16WK.biom -o otu_table_core_tk_SW_12-16WK
compute_core_microbiome.py -i tk_SW_16WK.biom -o otu_table_core_tk_SW_16WK


#Tracheal WASH_Dominant_Core

validate_mapping_file.py -m tk_mapping_3-16WK.txt -o Validated_Tk_mapping_3-16WK
filter_samples_from_otu_table.py -i tk_TW.biom -o tk_TW_03-51WK.biom -m tk_mapping_3-16WK_corrected.txt -s 'Core:Y'
biom convert -i tk_TW_03-16WK.biom   -o tk_TW_03-16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
compute_core_microbiome.py -i tk_TW_03-16WK.biom -o otu_table_core_tk_TW_03-16WK

filter_samples_from_otu_table.py -i tk_TW.biom -o tk_TW_03-16WK.biom -m tk_mapping_3-16WK_corrected.txt -s 'Core:Y'
filter_samples_from_otu_table.py -i tk_TW.biom -o tk_TW_05-16WK.biom -m tk_mapping_5-16WK_corrected.txt -s 'Core:Y'
filter_samples_from_otu_table.py -i tk_TW.biom -o tk_TW_08-16WK.biom -m tk_mapping_8-16WK_corrected.txt -s 'Core:Y'
filter_samples_from_otu_table.py -i tk_TW.biom -o tk_TW_12-16WK.biom -m tk_mapping_12-16WK_corrected.txt -s 'Core:Y'
filter_samples_from_otu_table.py -i tk_TW.biom -o tk_TW_16WK.biom -m tk_mapping_16WK_corrected.txt -s 'Core:Y'


biom convert -i tk_TW_03-16WK.biom   -o tk_TW_03-16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i tk_TW_05-16WK.biom   -o tk_TW_05-16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i tk_TW_08-16WK.biom   -o tk_TW_08-16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i tk_TW_12-16WK.biom   -o tk_TW_12-16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy
biom convert -i tk_TW_16WK.biom   -o tk_TW_16WKbiom_withtaxonomy.txt --to-tsv --header-key taxonomy

compute_core_microbiome.py -i tk_TW_03-16WK.biom -o otu_table_core_tk_TW_03-16WK
compute_core_microbiome.py -i tk_TW_05-16WK.biom -o otu_table_core_tk_TW_05-16WK
compute_core_microbiome.py -i tk_TW_08-16WK.biom -o otu_table_core_tk_TW_08-16WK
compute_core_microbiome.py -i tk_TW_12-16WK.biom -o otu_table_core_tk_TW_12-16WK
compute_core_microbiome.py -i tk_TW_16WK.biom -o otu_table_core_tk_TW_16WK





16. Determine number of reads per sample for rarefaction:
biom summarize-table -i ck_CE.biom -o biom_summary_ck_CE.txt

biom summarize-table -i ck_IL.biom -o biom_summary_ck_IL.txt

biom summarize-table -i ck_TW.biom -o biom_summary_ck_TW.txt

biom summarize-table -i ck_SW.biom -o biom_summary_ck_SW.txt

biom summarize-table -i ck_TT.biom -o biom_summary_ck_TT.txt

biom summarize-table -i otu_table_taxa_filtered_no_less_than_25.biom -o biom_summary_orig.txt


17. Rareify to appropriate number:
#Example -> single_rarefaction.py -i reo.biom -o reo_rare5000.biom -d 5000

single_rarefaction.py -i ck_CE.biom -o ck_CE_rare9420.biom -d 9420

single_rarefaction.py -i ck_IL.biom -o ck_IL_rare1043.biom -d 1043

single_rarefaction.py -i ck_TW.biom -o ck_TW_rare6257.biom -d 6257

single_rarefaction.py -i ck_SW.biom -o ck_SW_rare9420.biom -d 9420

single_rarefaction.py -i ck_TT.biom -o ck_TT_rare1121.biom -d 1121

single_rarefaction.py -i otu_table_taxa_filtered_no_less_than_25.biom -o ck_all_rare1043.biom -d 1043




18. Beta diversity:
#generate UniFrac for R
beta_diversity.py -i ck_all_rare1043.biom -o bdv_ck_all_rare1043/ -t rep_set.tre

beta_diversity.py -i ck_CE_rare9420.biom -o bdv_ck_CE_rare9420/ -t rep_set.tre

beta_diversity.py -i ck_IL_rare1043.biom -o bdv_ck_IL_rare1043/ -t rep_set.tre

beta_diversity.py -i ck_TW_rare6257.biom -o bdv_ck_TW_rare6257/ -t rep_set.tre

beta_diversity.py -i ck_SW_rare9420.biom -o bdv_ck_SW_rare9420/ -t rep_set.tre

beta_diversity.py -i ck_TT_rare1121.biom -o bdv_ck_TT_rare1121/ -t rep_set.tre

_____________________________________________________________________

#Commercial vs SPF
beta_diversity.py -i CE_rare15319.biom -o bdv_CE_rare15319/ -t rep_set_CE.tre
beta_diversity.py -i IL_rare1539.biom -o bdv_IL_rare1539/ -t rep_set_IL.tre

#generate bdv plots with QIIME
beta_diversity_through_plots.py -i reo_all_rare10000 -o bdiv_reo_all10000/ -t rep_set.tre -m mapping.txt -e 5000



19. Alpha diversity
------
A. Alpha rarefaction
alpha_rarefaction.py -i reo.biom -o reo_arare_max5000/ -t rep_set.tre -m mapping_REO2_corrected.txt -e 5000 --parameter_fp alpha_parameters.txt
alpha_rarefaction.py -i reo.biom -o reo_arare_shan_5000/ -t rep_set.tre -m mapping_REO2_corrected.txt -e 5000 -p alpha_params.txt

B. Statistics
compare_alpha_diversity.py -i ./reo_arare_max5000/alpha_div_collated/PD_whole_tree.txt -m mapping_REO2_corrected.txt -c Group -d 5000 -o adiv_test_otus_all_Group
compare_alpha_diversity.py -i ./reo_arare_max5000/alpha_div_collated/PD_whole_tree.txt -m mapping_REO2_corrected.txt -c Group -d 5000 -o adiv_test_tree_all_Group

------
alpha_rarefaction.py -i CE.biom -o arare_CE_14000/ -t rep_set.tre -m mapping5_corrected.txt -e 14000


Compare alpha diversity:
compare_alpha_diversity.py -i ./arare_1000/alpha_div_collated/PD_whole_tree.txt -m mapping2.txt -c Treatment -d 1000 -o adiv_test_Treatment

-----------

15. 2D PCA plots:
make_2d_plots.py -i bdiv_even5000/unweighted_unifrac_pc.txt -m mapping.txt -o 2d_plots/

16. OTUs in tabular format:
biom convert -i otu_table_rare5000.biom -o table.from_biom.txt --to-tsv 

17. Compare categories:
compare_categories.py --method anosim -i bdiv_even1000_cecum/unweighted_unifrac_dm.txt -m mapping2.txt -c Treatment -o anosim_out_cecum_treatment -n 999





16. TO BE CONTINUEDpyfasta info -n -1 ./seqs.good.fna > Length_Distro.txt




